root.objectives
===============

.. py:module:: root.objectives


Classes
-------

.. autoapisummary::

   root.objectives.AObjective
   root.objectives.Objective
   root.objectives.Objectives
   root.objectives.Versions


Module Contents
---------------

.. py:class:: AObjective

   Bases: :py:obj:`root.generated.openapi_aclient.models.objective.Objective`


   Wrapper for a single Objective.

   For available attributes, please check the (automatically
   generated) superclass documentation.


   .. py:attribute:: client_context
      :type:  root.utils.ClientContextCallable


.. py:class:: Objective

   Bases: :py:obj:`root.generated.openapi_client.models.objective.Objective`


   Wrapper for a single Objective.

   For available attributes, please check the (automatically
   generated) superclass documentation.


   .. py:attribute:: client_context
      :type:  root.utils.ClientContextCallable


.. py:class:: Objectives(client_context: root.utils.ClientContextCallable)

   Objectives API

   .. note::

      The construction of the API instance should be handled by
      accesing an attribute of a :class:`root.client.RootSignals` instance.


   .. py:method:: acreate(*, intent: Optional[str] = None, validators: Optional[List[root.validators.AValidator]] = None, test_dataset_id: Optional[str] = None, _request_timeout: Optional[int] = None, _client: root.generated.openapi_aclient.ApiClient) -> AObjective
      :async:


      Asynchronously create a new objective and return its ID.

      :param intent: The intent of the objective.
      :param validators: An optional list of validators.
      :param test_dataset_id: The ID of the test dataset



   .. py:method:: adelete(objective_id: str, *, _request_timeout: Optional[int] = None, _client: root.generated.openapi_aclient.ApiClient) -> None
      :async:


      Asynchronously delete the objective from the registry.

      :param objective_id: The objective to be deleted.



   .. py:method:: aget(objective_id: str, *, _client: root.generated.openapi_aclient.ApiClient, _request_timeout: Optional[int] = None) -> AObjective
      :async:


      Asynchronously get an objective by ID.

      :param objective_id: The objective to be fetched.



   .. py:method:: alist(*, intent: Optional[str] = None, limit: int = 100) -> AsyncIterator[root.generated.openapi_aclient.models.objective_list.ObjectiveList]
      :async:


      Asynchronously iterate through the objectives.

      :param intent: Specific intent the returned objectives must match.
      :param limit: Number of entries to iterate through at most.



   .. py:method:: aupdate(objective_id: str, *, intent: Optional[str] = None, validators: Optional[List[root.validators.AValidator]] = None, test_dataset_id: Optional[str] = None, _request_timeout: Optional[int] = None, _client: root.generated.openapi_aclient.ApiClient) -> AObjective
      :async:


      Asynchronously update an existing objective.

      :param objective_id: The objective to be updated.
      :param intent: The intent of the objective.
      :param validators: An optional list of validators.



   .. py:method:: create(*, intent: Optional[str] = None, validators: Optional[List[root.validators.Validator]] = None, test_dataset_id: Optional[str] = None, _request_timeout: Optional[int] = None, _client: root.generated.openapi_client.ApiClient) -> Objective

      Create a new objective and return its ID.

      :param intent: The intent of the objective.
      :param validators: An optional list of validators.
      :param test_dataset_id: The ID of the test dataset



   .. py:method:: delete(objective_id: str, *, _request_timeout: Optional[int] = None, _client: root.generated.openapi_client.ApiClient) -> None

      Delete the objective from the registry.

      :param objective_id: The objective to be deleted.



   .. py:method:: get(objective_id: str, *, _client: root.generated.openapi_client.ApiClient, _request_timeout: Optional[int] = None) -> Objective

      Get an objective by ID.

      :param objective_id: The objective to be fetched.



   .. py:method:: list(*, intent: Optional[str] = None, limit: int = 100, _client: root.generated.openapi_client.ApiClient) -> Iterator[root.generated.openapi_client.models.objective_list.ObjectiveList]

      Iterate through the objectives.

      :param intent: Specific intent the returned objectives must match.
      :param limit: Number of entries to iterate through at most.



   .. py:method:: update(objective_id: str, *, intent: Optional[str] = None, validators: Optional[List[root.validators.Validator]] = None, test_dataset_id: Optional[str] = None, _request_timeout: Optional[int] = None, _client: root.generated.openapi_client.ApiClient) -> Objective

      Update an existing objective.

      :param objective_id: The objective to be updated.
      :param intent: The intent of the objective.
      :param validators: An optional list of validators.



   .. py:attribute:: client_context


   .. py:attribute:: versions


.. py:class:: Versions(client_context: root.utils.ClientContextCallable)

   Version listing (sub)API

   Note that this should not be directly instantiated.


   .. py:method:: alist(objective_id: str) -> root.generated.openapi_aclient.models.paginated_objective_list.PaginatedObjectiveList
      :async:


      Asynchronously list all versions of an objective.

      :param objective_id: The objective to list the versions for



   .. py:method:: list(objective_id: str, *, _client: root.generated.openapi_client.ApiClient) -> root.generated.openapi_client.models.paginated_objective_list.PaginatedObjectiveList

      List all versions of an objective.

      :param objective_id: The objective to list the versions for



   .. py:attribute:: client_context


