# coding: utf-8

"""
Root Signals API

Root Signals JSON API provides a way to access Root Signals using provisioned API token

The version of the OpenAPI document: 1.0.0 (latest)
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from root.generated.openapi_aclient.models.evaluator_result import EvaluatorResult


class JudgeRectifierResponse(BaseModel):
    """
    JudgeRectifierResponse
    """  # noqa: E501

    evaluator_results: List[EvaluatorResult] = Field(description="List of results from each evaluator")
    improved_response: StrictStr = Field(description="Improved response from rectifier")
    original_response: StrictStr = Field(description="Original response before rectification")
    original_evaluator_results: List[EvaluatorResult] = Field(
        description="List of evaluation results for the original response"
    )
    __properties: ClassVar[List[str]] = [
        "evaluator_results",
        "improved_response",
        "original_response",
        "original_evaluator_results",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JudgeRectifierResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in evaluator_results (list)
        _items = []
        if self.evaluator_results:
            for _item in self.evaluator_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict["evaluator_results"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in original_evaluator_results (list)
        _items = []
        if self.original_evaluator_results:
            for _item in self.original_evaluator_results:
                if _item:
                    _items.append(_item.to_dict())
            _dict["original_evaluator_results"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JudgeRectifierResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "evaluator_results": [EvaluatorResult.from_dict(_item) for _item in obj["evaluator_results"]]
                if obj.get("evaluator_results") is not None
                else None,
                "improved_response": obj.get("improved_response"),
                "original_response": obj.get("original_response"),
                "original_evaluator_results": [
                    EvaluatorResult.from_dict(_item) for _item in obj["original_evaluator_results"]
                ]
                if obj.get("original_evaluator_results") is not None
                else None,
            }
        )
        return _obj
