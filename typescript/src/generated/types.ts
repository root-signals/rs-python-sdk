/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/beta/judges/": {
    /** @description List all accessible judges. Filters can be applied to narrow down the results. */
    get: operations["beta_judges_list"];
    /** @description Create a new judge with a name, intent, and list of evaluators. */
    post: operations["beta_judges_create"];
  };
  "/beta/judges/{judge_id}/execute/": {
    /** @description Execute a Judge. Judges that have a file will use it as a context automatically. See examples how to overwrite the context. */
    post: operations["beta_judges_execute_create"];
  };
  "/beta/judges/{judge_id}/openai/chat/completions": {
    post: operations["beta_judges_openai_chat_completions_create_2"];
  };
  "/beta/judges/{judge_id}/refine/": {
    /** @description Execute a judge as rectifier to improve the response. The rectifier will analyze the original response using the judge's evaluators and attempt to improve it based on their feedback. */
    post: operations["beta_judges_refine_create"];
  };
  "/beta/judges/{judge_id}/refine/openai/chat/completions": {
    post: operations["beta_judges_refine_openai_chat_completions_create"];
  };
  "/beta/judges/{id}/": {
    /** @description Retrieve a specific judge by its ID. */
    get: operations["beta_judges_retrieve"];
    /** @description Update an existing judge. */
    put: operations["beta_judges_update"];
    /** @description Delete a judge. */
    delete: operations["beta_judges_destroy"];
    /** @description Partially update an existing judge. */
    patch: operations["beta_judges_partial_update"];
  };
  "/beta/judges/{id}/duplicate/": {
    /** @description Copy a judge to user */
    post: operations["beta_judges_duplicate_create"];
  };
  "/beta/judges/{id}/invite/": {
    /** @description Send email invites to view a specific judge (up to 10 recipients) */
    post: operations["beta_judges_invite_create"];
  };
  "/beta/judges/generate/": {
    /** @description Generate a judge */
    post: operations["beta_judges_generate_create"];
  };
  "/beta/judges/openai/chat/completions": {
    post: operations["beta_judges_openai_chat_completions_create"];
  };
  "/v1/datasets/": {
    /** @description List datasets. */
    get: operations["v1_datasets_list"];
    /** @description Create a new dataset. */
    post: operations["v1_datasets_create"];
  };
  "/v1/datasets/{id}/": {
    /** @description Get dataset details or download the dataset file. */
    get: operations["v1_datasets_retrieve"];
    /** @description Delete a dataset. */
    delete: operations["v1_datasets_destroy"];
  };
  "/v1/datasets/status/{id}/": {
    /** @description Change the status of a dataset */
    put: operations["v1_datasets_status_update"];
  };
  "/v1/evaluators/": {
    /** @description List all evaluators. The response includes a 'requirements' field for each evaluator that specifies what parameters are required for execution. The requirements field indicates whether the evaluator requires request, response, contexts, functions, expected_output, or reference variables. */
    get: operations["v1_evaluators_list"];
    /** @description Create a new evaluator. */
    post: operations["v1_evaluators_create"];
  };
  "/v1/evaluators/{id}/": {
    /** @description Get evaluator details. The response includes a 'requirements' field that specifies what parameters are required for execution. The requirements field indicates whether the evaluator requires request, response, contexts, functions, expected_output, or reference variables. */
    get: operations["v1_evaluators_retrieve"];
    /** @description Update an evaluator. */
    put: operations["v1_evaluators_update"];
    /** @description Delete an evaluator. */
    delete: operations["v1_evaluators_destroy"];
    /** @description Update an evaluator. All fields are optional. */
    patch: operations["v1_evaluators_partial_update"];
  };
  "/v1/evaluators/calibrate/": {
    /** @description Test an evaluator definition using calibration data */
    post: operations["v1_evaluators_calibrate_create"];
  };
  "/v1/evaluators/calibrate/{id}": {
    /** @description Test an existing evaluator using calibration data */
    post: operations["v1_evaluators_calibrate_create_2"];
  };
  "/v1/evaluators/duplicate/{id}/": {
    /** @description Duplicate an evaluator */
    post: operations["v1_evaluators_duplicate_create"];
  };
  "/v1/evaluators/execute/{id}/": {
    /** @description Execute an evaluator. Check the evaluator's requirements to know which parameters are needed for execution. */
    post: operations["v1_evaluators_execute_create"];
  };
  "/v1/evaluators/execute/by-name/": {
    /** @description Execute an evaluator by name. Check the evaluator's requirements to know which parameters are needed for execution. */
    post: operations["v1_evaluators_execute_by_name_create"];
  };
  "/v1/evaluators/status/{id}/": {
    /** @description Change the status of an evaluator */
    put: operations["v1_evaluators_status_update"];
    /** @description Change the status of an evaluator */
    post: operations["v1_evaluators_status_create"];
  };
  "/v1/evaluators/versions/{id}/": {
    /** @description Get a list of all versions of an evaluator */
    get: operations["v1_evaluators_versions_list"];
  };
  "/v1/execution-logs/": {
    /** @description Get a list of execution logs. An execution log is created every time a skill or an evaluator is executed. */
    get: operations["v1_execution_logs_list"];
  };
  "/v1/execution-logs/{log_id}/": {
    /** @description Get the full details of a single execution log. */
    get: operations["v1_execution_logs_retrieve"];
  };
  "/v1/judges/": {
    /** @description List all accessible judges. Filters can be applied to narrow down the results. */
    get: operations["v1_judges_list"];
    /** @description Create a new judge with a name, intent, and list of evaluators. */
    post: operations["v1_judges_create"];
  };
  "/v1/judges/{judge_id}/execute/": {
    /** @description Execute a Judge. Judges that have a file will use it as a context automatically. See examples how to overwrite the context. */
    post: operations["v1_judges_execute_create"];
  };
  "/v1/judges/{judge_id}/openai/chat/completions": {
    post: operations["v1_judges_openai_chat_completions_create_2"];
  };
  "/v1/judges/{judge_id}/refine/": {
    /** @description Execute a judge as rectifier to improve the response. The rectifier will analyze the original response using the judge's evaluators and attempt to improve it based on their feedback. */
    post: operations["v1_judges_refine_create"];
  };
  "/v1/judges/{judge_id}/refine/openai/chat/completions": {
    post: operations["v1_judges_refine_openai_chat_completions_create"];
  };
  "/v1/judges/{id}/": {
    /** @description Retrieve a specific judge by its ID. */
    get: operations["v1_judges_retrieve"];
    /** @description Update an existing judge. */
    put: operations["v1_judges_update"];
    /** @description Delete a judge. */
    delete: operations["v1_judges_destroy"];
    /** @description Partially update an existing judge. */
    patch: operations["v1_judges_partial_update"];
  };
  "/v1/judges/{id}/duplicate/": {
    /** @description Copy a judge to user */
    post: operations["v1_judges_duplicate_create"];
  };
  "/v1/judges/{id}/invite/": {
    /** @description Send email invites to view a specific judge (up to 10 recipients) */
    post: operations["v1_judges_invite_create"];
  };
  "/v1/judges/generate/": {
    /** @description Generate a judge */
    post: operations["v1_judges_generate_create"];
  };
  "/v1/judges/openai/chat/completions": {
    post: operations["v1_judges_openai_chat_completions_create"];
  };
  "/v1/models/": {
    /** @description Get all available LLM models. */
    get: operations["v1_models_list"];
    /** @description Create a custom LLM model. */
    post: operations["v1_models_create"];
  };
  "/v1/models/{id}/": {
    /** @description Get model details. */
    get: operations["v1_models_retrieve"];
    /** @description Update a custom LLM model. */
    put: operations["v1_models_update"];
    delete: operations["v1_models_destroy"];
    patch: operations["v1_models_partial_update"];
  };
  "/v1/objectives/": {
    /** @description List Objective definitions. */
    get: operations["v1_objectives_list"];
    /** @description Create an Objective definition. */
    post: operations["v1_objectives_create"];
  };
  "/v1/objectives/{id}/": {
    /** @description Get an Objective definition details. */
    get: operations["v1_objectives_retrieve"];
    /** @description Update an Objective definition. */
    put: operations["v1_objectives_update"];
    /** @description Delete an Objective definition. */
    delete: operations["v1_objectives_destroy"];
    patch: operations["v1_objectives_partial_update"];
  };
  "/v1/objectives/versions/{id}/": {
    get: operations["v1_objectives_versions_list"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    DataSetCreate: {
      /** Format: uuid */
      id: string;
      name?: string | null;
      /** Format: uri */
      file?: string;
      type?: components["schemas"]["DataSetType"];
      /** Format: uri */
      url?: string;
      tags?: string[];
      owner: components["schemas"]["NestedUserDetails"];
      /** @default false */
      has_header?: boolean;
    };
    DataSetCreateRequest: {
      name?: string | null;
      /** Format: binary */
      file?: string;
      /** Format: uuid */
      draft_id?: string;
      type?: components["schemas"]["DataSetType"];
      /** Format: uri */
      url?: string;
      tags?: string[];
      /** @default false */
      has_header?: boolean;
    };
    DataSetList: {
      /** Format: uuid */
      id: string;
      name?: string | null;
      type?: components["schemas"]["DataSetType"];
      tags?: string[];
      owner: components["schemas"]["NestedUserDetails"];
      /** Format: date-time */
      created_at: string;
      status?: components["schemas"]["StatusEnum"];
      /** meta */
      _meta: unknown;
    };
    /**
     * @description * `reference` - REFERENCE
     * * `test` - TEST
     * @enum {string}
     */
    DataSetType: "reference" | "test";
    DatasetRangeRequest: {
      start: number | null;
      end: number | null;
    };
    Evaluator: {
      change_note?: string | null;
      /** Format: date-time */
      created_at: string;
      evaluator_demonstrations?: components["schemas"]["EvaluatorDemonstrations"][] | null;
      /** Format: uuid */
      id: string;
      input_variables?: components["schemas"]["InputVariable"][];
      model_params?: components["schemas"]["ModelParams"] | null;
      models?: string[];
      name: string;
      objective?: components["schemas"]["Objective"] | null;
      owner: components["schemas"]["NestedUserDetails"];
      prompt?: string;
      reference_variables?: components["schemas"]["ReferenceVariable"][];
      skill_type: components["schemas"]["SkillTypeEnum"];
      status?: components["schemas"]["StatusEnum"];
      system_message?: string;
      /** Format: date-time */
      updated_at: string | null;
      updated_by: components["schemas"]["NestedUserDetails"] | null;
      /** Format: uuid */
      version_id: string;
      /** meta */
      _meta: unknown;
      /**
       * @description Schema defining the input parameters required for execution. The schema consists of variables defined in the prompt template (predicate) and special variables like functions, contexts, and expected output.
       * @example {
       *   "response": {
       *     "type": "string"
       *   },
       *   "functions": {
       *     "type": "array",
       *     "items": {
       *       "type": "object"
       *     }
       *   },
       *   "contexts": {
       *     "type": "array",
       *     "items": {
       *       "type": "string"
       *     }
       *   },
       *   "my_custom_variable": {
       *     "type": "string"
       *   }
       * }
       */
      inputs: {
        [key: string]: {
          /** @enum {string} */
          type: "string" | "array";
          items?: {
            /** @enum {string} */
            type: "string" | "object";
          };
        };
      };
    };
    EvaluatorCalibrationOutput: {
      variables: {
        [key: string]: unknown;
      };
      /**
       * Format: double
       * @description Deprecated, use result.model_call_duration instead.
       */
      model_call_duration?: number;
      row_number: number;
      result: components["schemas"]["EvaluatorCalibrationResult"];
    };
    EvaluatorCalibrationResult: {
      llm_output: string;
      model: string;
      execution_log_id: string;
      rendered_prompt: string;
      /** Format: double */
      cost: number | null;
      /** Format: double */
      model_call_duration?: number;
      /** Format: double */
      expected_score: number;
      /** Format: double */
      score: number | null;
      justification?: string | null;
    };
    EvaluatorDemonstrations: {
      request?: string | null;
      response?: string | null;
      /** Format: double */
      score: number;
      justification?: string | null;
    };
    EvaluatorDemonstrationsRequest: {
      request?: string | null;
      response?: string | null;
      /** Format: double */
      score: number;
      justification?: string | null;
    };
    EvaluatorExecutionFunctionParameterPropertyRequest: {
      type: string;
      description?: string;
      items?: {
        [key: string]: unknown;
      };
    };
    EvaluatorExecutionFunctionParameterRequest: {
      type: components["schemas"]["EvaluatorExecutionFunctionParameterTypeEnum"];
      properties?: {
        [key: string]: components["schemas"]["EvaluatorExecutionFunctionParameterPropertyRequest"];
      };
      required?: string[];
    };
    /**
     * @description * `object` - Object
     * @enum {string}
     */
    EvaluatorExecutionFunctionParameterTypeEnum: "object";
    EvaluatorExecutionFunctionRequest: {
      name: string;
      parameters: components["schemas"]["EvaluatorExecutionFunctionParameterRequest"];
      description?: string;
    };
    EvaluatorExecutionFunctionsRequest: {
      type: components["schemas"]["EvaluatorExecutionFunctionsTypeEnum"];
      function: components["schemas"]["EvaluatorExecutionFunctionRequest"];
    };
    /**
     * @description * `function` - Function
     * @enum {string}
     */
    EvaluatorExecutionFunctionsTypeEnum: "function";
    EvaluatorExecutionRequest: {
      /** @default */
      request?: string;
      /** @default */
      response?: string;
      contexts?: string[];
      functions?: components["schemas"]["EvaluatorExecutionFunctionsRequest"][];
      expected_output?: string | null;
      tags?: string[];
      evaluator_version_id?: string | null;
      /**
       * @description Extra variables to be used in the execution of the evaluator. Optional.
       * @default {}
       */
      variables?: {
        [key: string]: string;
      };
    };
    EvaluatorExecutionResult: {
      evaluator_name: string | null;
      /** Format: double */
      score: number | null;
      /** Format: double */
      cost: number | null;
      execution_log_id: string;
      justification: string | null;
    };
    EvaluatorListOutput: {
      /** meta */
      _meta: unknown;
      /** Format: date-time */
      created_at: string;
      models: readonly string[];
      /** Format: uuid */
      id: string;
      name: string;
      objective: components["schemas"]["NestedObjectiveList"];
      owner: components["schemas"]["NestedUserDetails"];
      prompt: string;
      status: components["schemas"]["StatusEnum"];
      /** Format: date-time */
      updated_at: string | null;
      updated_by: components["schemas"]["NestedUserDetails"] | null;
      version_id: string;
      /**
       * @description Schema defining the input parameters required for execution. The schema consists of variables defined in the prompt template (predicate) and special variables like functions, contexts, and expected output.
       * @example {
       *   "response": {
       *     "type": "string"
       *   },
       *   "functions": {
       *     "type": "array",
       *     "items": {
       *       "type": "object"
       *     }
       *   },
       *   "contexts": {
       *     "type": "array",
       *     "items": {
       *       "type": "string"
       *     }
       *   },
       *   "my_custom_variable": {
       *     "type": "string"
       *   }
       * }
       */
      inputs: {
        [key: string]: {
          /** @enum {string} */
          type: "string" | "array";
          items?: {
            /** @enum {string} */
            type: "string" | "object";
          };
        };
      };
    };
    EvaluatorReference: {
      /** Format: uuid */
      id: string;
      /**
       * Format: uuid
       * @description Optional version ID. If not provided, the latest version will be tracked.
       */
      version_id?: string | null;
    };
    EvaluatorReferenceRequest: {
      /** Format: uuid */
      id: string;
      /**
       * Format: uuid
       * @description Optional version ID. If not provided, the latest version will be tracked.
       */
      version_id?: string | null;
    };
    EvaluatorRequest: {
      change_note?: string | null;
      evaluator_demonstrations?: components["schemas"]["EvaluatorDemonstrationsRequest"][] | null;
      input_variables?: components["schemas"]["InputVariableRequest"][];
      model_params?: components["schemas"]["ModelParamsRequest"] | null;
      models?: string[];
      name: string;
      objective?: components["schemas"]["ObjectiveRequest"] | null;
      /** Format: uuid */
      objective_id?: string | null;
      /**
       * Format: uuid
       * @description Optionally pin the Skill to a specific version of an Objective. If not provided, the latest version of the objective will be used and followed.
       */
      objective_version_id?: string | null;
      /**
       * @description Overwrite existing skill with the same name. Only for POST requests.
       * @default false
       */
      overwrite?: boolean;
      prompt?: string;
      reference_variables?: components["schemas"]["ReferenceVariableRequest"][];
      status?: components["schemas"]["StatusEnum"];
      system_message?: string;
    };
    EvaluatorResult: {
      evaluator_name: string;
      /** Format: double */
      score: number | null;
      justification: string | null;
      /** Format: uuid */
      evaluator_id: string;
      /** Format: uuid */
      evaluator_version_id: string;
    };
    ExecutionLogDetails: {
      chat_id: string | null;
      /** Format: double */
      cost: number | null;
      /** Format: date-time */
      created_at: string | null;
      evaluation_context: {
        readonly contexts?: string[];
        readonly expected_output?: string;
      };
      evaluator_latencies: (readonly {
          evaluator_name?: string;
          duration?: number;
        }[]) | null;
      /** Format: uuid */
      id: string;
      judge: {
        readonly name?: string;
      } | null;
      justification: string;
      llm_output: string;
      /** Format: double */
      model_call_duration: number;
      model_params?: components["schemas"]["ModelParams"] | null;
      model: string;
      objective: {
        readonly intent?: string;
        /** Format: uuid */
        readonly id?: string;
      };
      owner: components["schemas"]["NestedUserDetails"];
      /** Format: uuid */
      parent_execution_log_id?: string | null;
      rendered_prompt: string;
      /** Format: double */
      score: number | null;
      /**
       * @example {
       *   "prompt": "Provide a clear answer to the question: {{question}}",
       *   "pii_filter": false,
       *   "version_id": "1234",
       *   "name": "Skill name",
       *   "type": "skill",
       *   "id": "dfd76dd3-1415-4339-9b20-3bc2bbe3e8ce"
       * }
       */
      skill: {
        readonly prompt?: string;
        readonly pii_filter?: boolean;
        readonly version_id?: string;
        readonly name?: string;
        readonly type?: string;
        /** Format: uuid */
        readonly id?: string;
      };
      tags: readonly string[];
      validation_results: readonly components["schemas"]["SkillExecutionValidatorResult"][];
      variables: {
        [key: string]: string;
      } | null;
    };
    ExecutionLogList: {
      /** Format: double */
      cost: number | null;
      /** Format: date-time */
      created_at: string | null;
      /** Format: uuid */
      id: string;
      judge: {
        readonly name?: string;
      } | null;
      owner: components["schemas"]["NestedUserDetails"];
      /** Format: uuid */
      parent_execution_log_id?: string | null;
      /** Format: double */
      score: number | null;
      /**
       * @example {
       *   "name": "Skill name",
       *   "type": "skill",
       *   "id": "dfd76dd3-1415-4339-9b20-3bc2bbe3e8ce"
       * }
       */
      skill: {
        readonly name?: string;
        readonly type?: string;
        /** Format: uuid */
        readonly id?: string;
      };
      tags: readonly string[];
      /** Format: double */
      validation_result_average: number | null;
      /** @description The raw output from the LLM model. Only included when explicitly requested with include=llm_output parameter. */
      llm_output: string | null;
      /** @description The variables used in the execution. Only included when explicitly requested with include=variables parameter. */
      variables: {
        [key: string]: string;
      } | null;
      /** @description The evaluation context used in the execution. Only included when explicitly requested with include=evaluation_context parameter. */
      evaluation_context: {
        readonly contexts?: string[];
        readonly expected_output?: string;
      } | null;
    };
    GenerationModelParamsRequest: {
      seed?: number | null;
      /** Format: double */
      temperature?: number | null;
    };
    ID: {
      /** Format: uuid */
      id: string;
    };
    InputVariable: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      updated_at: string | null;
      name: string;
      /** Format: uuid */
      skill: string | null;
    };
    InputVariableRequest: {
      name: string;
    };
    Judge: {
      /** meta */
      _meta: {
        [key: string]: unknown;
      };
      /** Format: date-time */
      created_at: string | null;
      evaluators: readonly components["schemas"]["NestedEvaluator"][];
      files: readonly {
          url?: string;
          name?: string;
          /** Format: uuid */
          id?: string;
        }[];
      /** Format: uuid */
      id: string;
      name: string;
      objective: components["schemas"]["NestedVectorObjective"];
      stage?: string;
      /**
       * @description Schema defining the input parameters required for execution. The schema consists of variables defined in the prompt template (predicate) and special variables like functions, contexts, and expected output.
       * @example {
       *   "response": {
       *     "type": "string"
       *   },
       *   "functions": {
       *     "type": "array",
       *     "items": {
       *       "type": "object"
       *     }
       *   },
       *   "contexts": {
       *     "type": "array",
       *     "items": {
       *       "type": "string"
       *     }
       *   },
       *   "my_custom_variable": {
       *     "type": "string"
       *   }
       * }
       */
      inputs: {
        [key: string]: {
          /** @enum {string} */
          type: "string" | "array";
          items?: {
            /** @enum {string} */
            type: "string" | "object";
          };
        };
      };
      status: components["schemas"]["JudgeStatusEnum"];
    };
    JudgeExecutionRequest: {
      /** @default */
      request?: string;
      /** @default */
      response?: string;
      contexts?: string[];
      functions?: components["schemas"]["EvaluatorExecutionFunctionsRequest"][];
      expected_output?: string | null;
      tags?: string[];
    };
    JudgeExecutionResponse: {
      /** @description List of results from each evaluator */
      evaluator_results: components["schemas"]["EvaluatorResult"][];
    };
    JudgeGeneratorRequest: {
      intent: string;
      stage?: string | null;
      visibility: components["schemas"]["VisibilityEnum"];
      /** Format: uuid */
      file_id?: string | null;
      extra_contexts?: ({
        [key: string]: string | null;
      }) | null;
      /** @default true */
      strict?: boolean;
      generating_model_params?: components["schemas"]["GenerationModelParamsRequest"] | null;
    };
    JudgeGeneratorResponse: {
      /** Format: uuid */
      judge_id: string;
      error_code?: string | null;
    };
    JudgeInviteRequest: {
      /** @description List of email addresses to send the invite to (maximum 10) */
      emails: string[];
      /**
       * Format: uri
       * @description Full URL to the judge to include in the email
       */
      judge_url: string;
    };
    JudgeList: {
      /** Format: uuid */
      id: string;
      name: string;
      intent: string;
      /** Format: date-time */
      created_at: string | null;
      status: components["schemas"]["JudgeStatusEnum"];
      /**
       * @description Schema defining the input parameters required for execution. The schema consists of variables defined in the prompt template (predicate) and special variables like functions, contexts, and expected output.
       * @example {
       *   "response": {
       *     "type": "string"
       *   },
       *   "functions": {
       *     "type": "array",
       *     "items": {
       *       "type": "object"
       *     }
       *   },
       *   "contexts": {
       *     "type": "array",
       *     "items": {
       *       "type": "string"
       *     }
       *   },
       *   "my_custom_variable": {
       *     "type": "string"
       *   }
       * }
       */
      inputs: {
        [key: string]: {
          /** @enum {string} */
          type: "string" | "array";
          items?: {
            /** @enum {string} */
            type: "string" | "object";
          };
        };
      };
      evaluators: readonly components["schemas"]["NestedEvaluator"][];
    };
    JudgeRectifierRequestRequest: {
      /** @default */
      request?: string;
      /** @default */
      response?: string;
      contexts?: string[];
      functions?: components["schemas"]["EvaluatorExecutionFunctionsRequest"][];
      expected_output?: string | null;
      tags?: string[];
    };
    JudgeRectifierResponse: {
      /** @description List of results from each evaluator */
      evaluator_results: components["schemas"]["EvaluatorResult"][];
      /** @description Improved response from rectifier */
      improved_response: string;
      /** @description Original response before rectification */
      original_response: string;
      /** @description List of evaluation results for the original response */
      original_evaluator_results: components["schemas"]["EvaluatorResult"][];
    };
    JudgeRequest: {
      evaluator_references?: components["schemas"]["EvaluatorReferenceRequest"][];
      /** @description Intent for the judge */
      intent: string;
      name: string;
      stage?: string;
    };
    /**
     * @description * `unlisted` - unlisted
     * * `listed` - listed
     * * `public` - public
     * * `global` - global
     * @enum {string}
     */
    JudgeStatusEnum: "unlisted" | "listed" | "public" | "global";
    Model: {
      default_key?: string | null;
      id: string;
      max_output_token_count?: number;
      max_token_count?: number | null;
      model?: string;
      name: string;
      url?: string | null;
    };
    ModelList: {
      /** Format: uuid */
      id: string;
      name: string;
      owner: components["schemas"]["NestedUserDetails"];
      provider: components["schemas"]["Provider"] | null;
    };
    ModelParams: {
      /** Format: double */
      temperature?: number | null;
    };
    ModelParamsRequest: {
      /** Format: double */
      temperature?: number | null;
    };
    ModelRequest: {
      default_key?: string | null;
      max_output_token_count?: number;
      max_token_count?: number | null;
      model?: string;
      name: string;
      url?: string | null;
    };
    NestedEvaluator: {
      /** Format: uuid */
      id: string;
      name: string;
      objective: components["schemas"]["NestedEvaluatorObjective"];
      is_root_evaluator: boolean;
      model: string;
      /** Format: uuid */
      version_id: string;
    };
    NestedEvaluatorObjective: {
      intent: string;
    };
    NestedEvaluatorRequest: {
      /** Format: uuid */
      id: string;
      name: string;
      is_root_evaluator: boolean;
      /** Format: uuid */
      version_id: string;
    };
    NestedObjectiveEvaluator: {
      /** Format: uuid */
      id: string;
      name?: string;
      requires_expected_output?: boolean;
      requires_contexts?: boolean;
      requires_functions?: boolean;
    };
    NestedObjectiveEvaluatorRequest: {
      name?: string;
      requires_expected_output?: boolean;
      requires_contexts?: boolean;
      requires_functions?: boolean;
    };
    NestedObjectiveList: {
      /** Format: uuid */
      id: string;
      intent?: string;
      status?: components["schemas"]["StatusEnum"];
      validators: readonly components["schemas"]["ObjectiveValidator"][];
    };
    NestedUserDetails: {
      /**
       * Email address
       * Format: email
       */
      email: string;
      full_name: string;
    };
    NestedUserDetailsRequest: {
      full_name: string;
    };
    NestedVectorObjective: {
      /** Format: uuid */
      id: string;
      intent: string;
    };
    NestedVectorObjectiveRequest: {
      intent: string;
    };
    Objective: {
      /** Format: uuid */
      id: string;
      intent?: string;
      status?: components["schemas"]["StatusEnum"];
      /** @description Deprecated: Use test_dataset_id instead. */
      test_set: (readonly string[][]) | null;
      validators?: components["schemas"]["ObjectiveValidator"][];
      /** Format: date-time */
      created_at: string;
      owner: components["schemas"]["NestedUserDetails"];
      /** Format: uuid */
      version_id: string;
      /** Format: uuid */
      test_dataset_id?: string | null;
      /** meta */
      _meta: {
        [key: string]: unknown;
      };
    };
    ObjectiveList: {
      /** Format: uuid */
      id: string;
      intent?: string;
      status?: components["schemas"]["StatusEnum"];
      owner: components["schemas"]["NestedUserDetails"];
      /** Format: date-time */
      created_at: string;
      validators: readonly components["schemas"]["ObjectiveValidator"][];
      /** meta */
      _meta: {
        [key: string]: unknown;
      };
    };
    ObjectiveRequest: {
      intent?: string;
      status?: components["schemas"]["StatusEnum"];
      validators?: components["schemas"]["ObjectiveValidatorRequest"][];
      /** @description Force creation of a new objective. Applies only to PUT requests. */
      force_create?: boolean;
      /** Format: uuid */
      test_dataset_id?: string | null;
    };
    ObjectiveValidator: {
      evaluator: components["schemas"]["NestedObjectiveEvaluator"];
      /** Format: double */
      threshold?: number;
    };
    ObjectiveValidatorRequest: {
      /** Format: uuid */
      evaluator_id?: string;
      evaluator_name?: string;
      /** Format: double */
      threshold?: number;
    };
    PaginatedDataSetListList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["DataSetList"][];
    };
    PaginatedEvaluatorList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["Evaluator"][];
    };
    PaginatedEvaluatorListOutputList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["EvaluatorListOutput"][];
    };
    PaginatedExecutionLogListList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["ExecutionLogList"][];
    };
    PaginatedJudgeListList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["JudgeList"][];
    };
    PaginatedModelListList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["ModelList"][];
    };
    PaginatedObjectiveList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["Objective"][];
    };
    PaginatedObjectiveListList: {
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cD00ODY%3D"
       */
      next?: string | null;
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?cursor=cj0xJnA9NDg3
       */
      previous?: string | null;
      results: components["schemas"]["ObjectiveList"][];
    };
    PatchedEvaluatorRequest: {
      change_note?: string | null;
      evaluator_demonstrations?: components["schemas"]["EvaluatorDemonstrationsRequest"][] | null;
      input_variables?: components["schemas"]["InputVariableRequest"][];
      model_params?: components["schemas"]["ModelParamsRequest"] | null;
      models?: string[];
      name?: string;
      objective?: components["schemas"]["ObjectiveRequest"] | null;
      /** Format: uuid */
      objective_id?: string | null;
      /**
       * Format: uuid
       * @description Optionally pin the Skill to a specific version of an Objective. If not provided, the latest version of the objective will be used and followed.
       */
      objective_version_id?: string | null;
      /**
       * @description Overwrite existing skill with the same name. Only for POST requests.
       * @default false
       */
      overwrite?: boolean;
      prompt?: string;
      reference_variables?: components["schemas"]["ReferenceVariableRequest"][];
      status?: components["schemas"]["StatusEnum"];
      system_message?: string;
    };
    PatchedJudgeRequest: {
      evaluator_references?: components["schemas"]["EvaluatorReferenceRequest"][];
      /** @description Intent for the judge */
      intent?: string;
      name?: string;
      stage?: string;
    };
    PatchedModelRequest: {
      default_key?: string | null;
      max_output_token_count?: number;
      max_token_count?: number | null;
      model?: string;
      name?: string;
      url?: string | null;
    };
    PatchedObjectiveRequest: {
      intent?: string;
      status?: components["schemas"]["StatusEnum"];
      validators?: components["schemas"]["ObjectiveValidatorRequest"][];
      /** @description Force creation of a new objective. Applies only to PUT requests. */
      force_create?: boolean;
      /** Format: uuid */
      test_dataset_id?: string | null;
    };
    Provider: {
      id: string;
      name: string;
      /** Format: uri */
      logo_light?: string;
      /** Format: uri */
      logo_dark?: string;
      is_gdpr_compliant?: boolean;
    };
    ReferenceVariable: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      dataset: string;
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      updated_at: string | null;
      name: string;
      /** Format: uuid */
      skill: string | null;
    };
    ReferenceVariableRequest: {
      /** Format: uuid */
      dataset: string;
      name: string;
    };
    SkillExecutionValidatorResult: {
      /** Format: uuid */
      evaluator_id: string | null;
      evaluator_name: string;
      /** Format: double */
      result: number | null;
      /** Format: double */
      threshold: number;
      status: components["schemas"]["ValidationResultStatus"];
      justification: string;
    };
    SkillTestDataRequest: {
      test_data?: string[][] | null;
      test_dataset_id?: string;
      /** @description Specifies the range of dataset rows to use */
      dataset_range?: components["schemas"]["DatasetRangeRequest"] | null;
    };
    SkillTestInputRequest: {
      test_data?: string[][] | null;
      test_dataset_id?: string;
      /** @description Specifies the range of dataset rows to use */
      dataset_range?: components["schemas"]["DatasetRangeRequest"] | null;
      prompt: string;
      /** @default [] */
      reference_variables?: components["schemas"]["ReferenceVariableRequest"][];
      /** @default [] */
      input_variables?: components["schemas"]["InputVariableRequest"][];
      models?: string[];
      name?: string | null;
      /** @default false */
      pii_filter?: boolean;
      objective?: components["schemas"]["ObjectiveRequest"] | null;
      /** @default false */
      is_evaluator?: boolean;
    };
    /**
     * @description * `managed` - managed
     * * `native` - native
     * @enum {string}
     */
    SkillTypeEnum: "managed" | "native";
    StatusChange: {
      status: components["schemas"]["StatusChangeStatusEnum"];
    };
    StatusChangeRequest: {
      status: components["schemas"]["StatusChangeStatusEnum"];
    };
    /**
     * @description * `unlisted` - unlisted
     * * `listed` - listed
     * @enum {string}
     */
    StatusChangeStatusEnum: "unlisted" | "listed";
    /**
     * @description * `unlisted` - unlisted
     * * `listed` - listed
     * * `public` - public
     * * `public_unlisted` - public_unlisted
     * @enum {string}
     */
    StatusEnum: "unlisted" | "listed" | "public" | "public_unlisted";
    /**
     * @description * `pending` - Pending
     * * `finished` - Finished
     * @enum {string}
     */
    ValidationResultStatus: "pending" | "finished";
    /**
     * @description * `global` - global
     * * `listed` - listed
     * * `unlisted` - unlisted
     * @enum {string}
     */
    VisibilityEnum: "global" | "listed" | "unlisted";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description List all accessible judges. Filters can be applied to narrow down the results. */
  beta_judges_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Filter by is the judge preset or not */
        is_preset?: boolean;
        /** @description Filter by is the judge public or not */
        is_public?: boolean;
        name?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Search for judge by name, intent... */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedJudgeListList"];
        };
      };
    };
  };
  /** @description Create a new judge with a name, intent, and list of evaluators. */
  beta_judges_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeRequest"];
        "multipart/form-data": components["schemas"]["JudgeRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Execute a Judge. Judges that have a file will use it as a context automatically. See examples how to overwrite the context. */
  beta_judges_execute_create: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["JudgeExecutionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeExecutionRequest"];
        "multipart/form-data": components["schemas"]["JudgeExecutionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JudgeExecutionResponse"];
        };
      };
    };
  };
  beta_judges_openai_chat_completions_create_2: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Execute a judge as rectifier to improve the response. The rectifier will analyze the original response using the judge's evaluators and attempt to improve it based on their feedback. */
  beta_judges_refine_create: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["JudgeRectifierRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeRectifierRequestRequest"];
        "multipart/form-data": components["schemas"]["JudgeRectifierRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JudgeRectifierResponse"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  beta_judges_refine_openai_chat_completions_create: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Retrieve a specific judge by its ID. */
  beta_judges_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Update an existing judge. */
  beta_judges_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeRequest"];
        "multipart/form-data": components["schemas"]["JudgeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Delete a judge. */
  beta_judges_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Partially update an existing judge. */
  beta_judges_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedJudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedJudgeRequest"];
        "multipart/form-data": components["schemas"]["PatchedJudgeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Copy a judge to user */
  beta_judges_duplicate_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Send email invites to view a specific judge (up to 10 recipients) */
  beta_judges_invite_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeInviteRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeInviteRequest"];
        "multipart/form-data": components["schemas"]["JudgeInviteRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Generate a judge */
  beta_judges_generate_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeGeneratorRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeGeneratorRequest"];
        "multipart/form-data": components["schemas"]["JudgeGeneratorRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["JudgeGeneratorResponse"];
        };
      };
    };
  };
  beta_judges_openai_chat_completions_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description List datasets. */
  v1_datasets_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Search for dataset by name */
        search?: string;
        /** @description Filter by type. Possible values: reference, test */
        type?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDataSetListList"];
        };
      };
    };
  };
  /** @description Create a new dataset. */
  v1_datasets_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["DataSetCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["DataSetCreateRequest"];
        "multipart/form-data": components["schemas"]["DataSetCreateRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DataSetCreate"];
        };
      };
    };
  };
  /** @description Get dataset details or download the dataset file. */
  v1_datasets_retrieve: {
    parameters: {
      query?: {
        /** @description Download the dataset. */
        download?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DataSetList"];
        };
      };
    };
  };
  /** @description Delete a dataset. */
  v1_datasets_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Change the status of a dataset */
  v1_datasets_status_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatusChangeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["StatusChangeRequest"];
        "multipart/form-data": components["schemas"]["StatusChangeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StatusChange"];
        };
      };
    };
  };
  /** @description List all evaluators. The response includes a 'requirements' field for each evaluator that specifies what parameters are required for execution. The requirements field indicates whether the evaluator requires request, response, contexts, functions, expected_output, or reference variables. */
  v1_evaluators_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Return only Root Signals defined evaluators. */
        is_root_evaluator?: boolean;
        /** @description Search for evaluators by name (exact match). */
        name?: string;
        objective__intent?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        owner__email?: string;
        owner__first_name?: string;
        owner__last_name?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Search for evaluators by name or description. */
        search?: string;
        /**
         * @description * `managed` - managed
         * * `native` - native
         */
        skill_type?: "managed" | "native";
        /**
         * @description * `unlisted` - unlisted
         * * `listed` - listed
         * * `public` - public
         * * `public_unlisted` - public_unlisted
         */
        status?: "listed" | "public" | "public_unlisted" | "unlisted";
      };
    };
    responses: {
      /** @description List of evaluators with their requirements */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEvaluatorListOutputList"];
        };
      };
    };
  };
  /** @description Create a new evaluator. */
  v1_evaluators_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluatorRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EvaluatorRequest"];
        "multipart/form-data": components["schemas"]["EvaluatorRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Evaluator"];
        };
      };
    };
  };
  /** @description Get evaluator details. The response includes a 'requirements' field that specifies what parameters are required for execution. The requirements field indicates whether the evaluator requires request, response, contexts, functions, expected_output, or reference variables. */
  v1_evaluators_retrieve: {
    parameters: {
      query?: {
        /** @description Include the last N validator results for each validator in the response. */
        include_last_n_validator_results?: number;
        /** @description Get a specific version of the evaluator */
        version_id?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Evaluator details with requirements information */
      200: {
        content: {
          "application/json": components["schemas"]["Evaluator"];
        };
      };
    };
  };
  /** @description Update an evaluator. */
  v1_evaluators_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluatorRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EvaluatorRequest"];
        "multipart/form-data": components["schemas"]["EvaluatorRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Evaluator"];
        };
      };
    };
  };
  /** @description Delete an evaluator. */
  v1_evaluators_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Update an evaluator. All fields are optional. */
  v1_evaluators_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedEvaluatorRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedEvaluatorRequest"];
        "multipart/form-data": components["schemas"]["PatchedEvaluatorRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Evaluator"];
        };
      };
    };
  };
  /** @description Test an evaluator definition using calibration data */
  v1_evaluators_calibrate_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkillTestInputRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SkillTestInputRequest"];
        "multipart/form-data": components["schemas"]["SkillTestInputRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorCalibrationOutput"][];
        };
      };
    };
  };
  /** @description Test an existing evaluator using calibration data */
  v1_evaluators_calibrate_create_2: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["SkillTestDataRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SkillTestDataRequest"];
        "multipart/form-data": components["schemas"]["SkillTestDataRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorCalibrationOutput"][];
        };
      };
    };
  };
  /** @description Duplicate an evaluator */
  v1_evaluators_duplicate_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluatorRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EvaluatorRequest"];
        "multipart/form-data": components["schemas"]["EvaluatorRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Evaluator"];
        };
      };
    };
  };
  /** @description Execute an evaluator. Check the evaluator's requirements to know which parameters are needed for execution. */
  v1_evaluators_execute_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EvaluatorExecutionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EvaluatorExecutionRequest"];
        "multipart/form-data": components["schemas"]["EvaluatorExecutionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorExecutionResult"];
        };
      };
    };
  };
  /** @description Execute an evaluator by name. Check the evaluator's requirements to know which parameters are needed for execution. */
  v1_evaluators_execute_by_name_create: {
    parameters: {
      query: {
        /** @description The name of the evaluator to execute */
        name: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["EvaluatorExecutionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EvaluatorExecutionRequest"];
        "multipart/form-data": components["schemas"]["EvaluatorExecutionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluatorExecutionResult"];
        };
      };
    };
  };
  /** @description Change the status of an evaluator */
  v1_evaluators_status_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatusChangeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["StatusChangeRequest"];
        "multipart/form-data": components["schemas"]["StatusChangeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StatusChange"];
        };
      };
    };
  };
  /** @description Change the status of an evaluator */
  v1_evaluators_status_create: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatusChangeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["StatusChangeRequest"];
        "multipart/form-data": components["schemas"]["StatusChangeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StatusChange"];
        };
      };
    };
  };
  /** @description Get a list of all versions of an evaluator */
  v1_evaluators_versions_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEvaluatorList"];
        };
      };
    };
  };
  /** @description Get a list of execution logs. An execution log is created every time a skill or an evaluator is executed. */
  v1_execution_logs_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /**
         * @description * `runtime` - runtime
         * * `test` - test
         */
        execution_type?: "runtime" | "test";
        /** @description Comma-separated list of additional fields to include in the response. Supports: llm_output, variables, evaluation_context */
        include?: string;
        /** @description Filter logs by maximum score, inclusive, excludes null scores */
        max_score?: number;
        /** @description Filter logs by minimum score, inclusive, excludes null scores */
        min_score?: number;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Filter with skill name or id */
        search?: string;
        skill_data_id?: string;
        /** @description Filter logs by tag names (comma-separated) */
        tags?: string;
        /** @description Return only unique skills */
        unique_skills?: boolean;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedExecutionLogListList"];
        };
      };
    };
  };
  /** @description Get the full details of a single execution log. */
  v1_execution_logs_retrieve: {
    parameters: {
      path: {
        log_id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExecutionLogDetails"];
        };
      };
    };
  };
  /** @description List all accessible judges. Filters can be applied to narrow down the results. */
  v1_judges_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Filter by is the judge preset or not */
        is_preset?: boolean;
        /** @description Filter by is the judge public or not */
        is_public?: boolean;
        name?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Search for judge by name, intent... */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedJudgeListList"];
        };
      };
    };
  };
  /** @description Create a new judge with a name, intent, and list of evaluators. */
  v1_judges_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeRequest"];
        "multipart/form-data": components["schemas"]["JudgeRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Execute a Judge. Judges that have a file will use it as a context automatically. See examples how to overwrite the context. */
  v1_judges_execute_create: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["JudgeExecutionRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeExecutionRequest"];
        "multipart/form-data": components["schemas"]["JudgeExecutionRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JudgeExecutionResponse"];
        };
      };
    };
  };
  v1_judges_openai_chat_completions_create_2: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Execute a judge as rectifier to improve the response. The rectifier will analyze the original response using the judge's evaluators and attempt to improve it based on their feedback. */
  v1_judges_refine_create: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["JudgeRectifierRequestRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeRectifierRequestRequest"];
        "multipart/form-data": components["schemas"]["JudgeRectifierRequestRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JudgeRectifierResponse"];
        };
      };
      400: {
        content: {
          "application/json": unknown;
        };
      };
      403: {
        content: {
          "application/json": unknown;
        };
      };
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  v1_judges_refine_openai_chat_completions_create: {
    parameters: {
      path: {
        judge_id: string;
      };
    };
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Retrieve a specific judge by its ID. */
  v1_judges_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Update an existing judge. */
  v1_judges_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeRequest"];
        "multipart/form-data": components["schemas"]["JudgeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Delete a judge. */
  v1_judges_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  /** @description Partially update an existing judge. */
  v1_judges_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedJudgeRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedJudgeRequest"];
        "multipart/form-data": components["schemas"]["PatchedJudgeRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Copy a judge to user */
  v1_judges_duplicate_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
    };
  };
  /** @description Send email invites to view a specific judge (up to 10 recipients) */
  v1_judges_invite_create: {
    parameters: {
      path: {
        /** @description A UUID string identifying this judge. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeInviteRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeInviteRequest"];
        "multipart/form-data": components["schemas"]["JudgeInviteRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** @description Generate a judge */
  v1_judges_generate_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["JudgeGeneratorRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["JudgeGeneratorRequest"];
        "multipart/form-data": components["schemas"]["JudgeGeneratorRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["JudgeGeneratorResponse"];
        };
      };
    };
  };
  v1_judges_openai_chat_completions_create: {
    responses: {
      /** @description No response body */
      200: {
        content: never;
      };
    };
  };
  /** @description Get all available LLM models. */
  v1_models_list: {
    parameters: {
      query?: {
        /** @description Search for models by capabilities. */
        capable_of?: string[];
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedModelListList"];
        };
      };
    };
  };
  /** @description Create a custom LLM model. */
  v1_models_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ModelRequest"];
        "multipart/form-data": components["schemas"]["ModelRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /** @description Get model details. */
  v1_models_retrieve: {
    parameters: {
      path: {
        /** @description A UUID string identifying this model. */
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /** @description Update a custom LLM model. */
  v1_models_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this model. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModelRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ModelRequest"];
        "multipart/form-data": components["schemas"]["ModelRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  v1_models_destroy: {
    parameters: {
      path: {
        /** @description A UUID string identifying this model. */
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  v1_models_partial_update: {
    parameters: {
      path: {
        /** @description A UUID string identifying this model. */
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedModelRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedModelRequest"];
        "multipart/form-data": components["schemas"]["PatchedModelRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /** @description List Objective definitions. */
  v1_objectives_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Filter objectives by whether they have validators. */
        has_validators?: boolean;
        /** @description Search for objectives by intent (exact match). */
        intent?: string;
        /** @description Which field to use when ordering the results. */
        ordering?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
        /** @description Search for objectives by intent. */
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedObjectiveListList"];
        };
      };
    };
  };
  /** @description Create an Objective definition. */
  v1_objectives_create: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ObjectiveRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ObjectiveRequest"];
        "multipart/form-data": components["schemas"]["ObjectiveRequest"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ID"];
        };
      };
    };
  };
  /** @description Get an Objective definition details. */
  v1_objectives_retrieve: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Objective"];
        };
      };
    };
  };
  /** @description Update an Objective definition. */
  v1_objectives_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ObjectiveRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ObjectiveRequest"];
        "multipart/form-data": components["schemas"]["ObjectiveRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Objective"];
        };
      };
    };
  };
  /** @description Delete an Objective definition. */
  v1_objectives_destroy: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description No response body */
      204: {
        content: never;
      };
    };
  };
  v1_objectives_partial_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PatchedObjectiveRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["PatchedObjectiveRequest"];
        "multipart/form-data": components["schemas"]["PatchedObjectiveRequest"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Objective"];
        };
      };
    };
  };
  v1_objectives_versions_list: {
    parameters: {
      query?: {
        /** @description The pagination cursor value. */
        cursor?: string;
        /** @description Number of results to return per page. */
        page_size?: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedObjectiveList"];
        };
      };
    };
  };
}
